/* SPDX-License-Identifier: (GPL-2.0+ OR MIT) */

#include <env/nxp/imx_env.env>

#ifdef CONFIG_ANDROID_SUPPORT
splashpos=m,m
splashimage=0x90000000
fdt_high=0xffffffffffffffff
initrd_high=0xffffffffffffffff
emmc_dev=0
sd_dev=1
#else

initrd_addr=0x83800000
initrd_high=0xffffffffffffffff
emmc_dev=0
sd_dev=1

#ifdef CONFIG_AHAB_BOOT
sec_boot=yes
#else
sec_boot=no
#endif

nodes=/usbg1 /usbg2 /wdt-reboot /rm67199_panel /dsi-host /display-subsystem /ldb-phy /soc@0/system-controller@4ac10000 /soc@0/ldb@4ac10020 /soc@0/phy@4ac10024 /soc@0/dsi@4ae10000 /soc@0/lcd-controller@4ae30000 /soc@0/bus@44000000/i2c@44350000/pmic@25 /soc@0/bus@44000000/tmu@44482000 /soc@0/bus@44000000/i2c@44340000/hdmi@3d
sr_ir_v2_cmd=cp.b ${fdtcontroladdr} ${fdt_addr_r} 0x10000;
	fdt addr ${fdt_addr_r};
	fdt rm /soc@0/bus@42800000/ethernet@42890000 nvmem-cells;
	fdt rm /soc@0/bus@42800000/ethernet@42890000 nvmem-cell-names;
	fdt rm /soc@0/bus@42800000/ethernet@428a0000 nvmem-cells;
	fdt rm /soc@0/bus@42800000/ethernet@428a0000 nvmem-cell-names;
	fdt rm /soc@0/usb@4c200000 extcon;
	fdt rm /soc@0/usb@4c100000 extcon;
	for i in ${nodes}; do fdt rm ${i}; done

jh_root_dtb=imx93-11x11-evk-root.dtb
jh_mmcboot=setenv fdtfile ${jh_root_dtb};
	setenv jh_clk kvm.enable_virt_at_load=false clk_ignore_unused mem=1248MB kvm-arm.mode=nvhe;
	if run loadimage; then run mmcboot;
	else run jh_netboot; fi;
jh_netboot=setenv fdtfile ${jh_root_dtb};
	setenv jh_clk kvm.enable_virt_at_load=false clk_ignore_unused mem=1248MB kvm-arm.mode=nvhe; run netboot;

boot_targets=usb0 mmc0 mmc1 dhcp
boot_fit=no
bootm_size=0x10000000
splashimage=0x90000000
cntr_addr=0x98000000
cntr_file=os_cntr_signed.bin
console=ttyLP0,115200 earlycon
fdt_addr_r=0x83000000
fdt_addr=0x83000000
fdt_high=0xffffffffffffffff
fdtfile=CONFIG_DEFAULT_FDT_FILE
image=Image
mmcdev=CONFIG_SYS_MMC_ENV_DEV
mmcpart=1
mmcroot=/dev/mmcblk1p2 rootwait rw
mmcautodetect=yes
mmcargs=setenv bootargs ${jh_clk} ${mcore_clk} console=${console} root=${mmcroot}
prepare_mcore=setenv mcore_clk clk-imx93.mcore_booted
kernel_addr_r=CONFIG_SYS_LOAD_ADDR
loadbootscript=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};
bootscript=echo Running bootscript from mmc ...; source
loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}
loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr_r} ${fdtfile}
loadcntr=fatload mmc ${mmcdev}:${mmcpart} ${cntr_addr} ${cntr_file}
auth_os=booti ${cntr_addr}
boot_os=booti ${loadaddr} - ${fdt_addr_r}
mmcboot=
	echo Booting from mmc ...;
	run mmcargs;
	if test ${sec_boot} = yes; then
		run auth_os;
	else
		if run loadfdt; then
			run boot_os;
		else
			echo WARN: Cannot load the DT;
		fi;
	fi;
netargs=setenv bootargs ${jh_clk} ${mcore_clk} console=${console} root=/dev/nfs
	ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp
netboot=
	echo Booting from net ...;
	run netargs;
	if test ${ip_dyn} = yes; then
		setenv get_cmd dhcp;
	else
		setenv get_cmd tftp;
	fi;
	if test ${sec_boot} = yes; then
		${get_cmd} ${cntr_addr} ${cntr_file};
		run auth_os;
	else
		${get_cmd} ${loadaddr} ${image};
		if ${get_cmd} ${fdt_addr_r} ${fdtfile}; then
			run boot_os;
		else
			echo WARN: Cannot load the DT;
		fi;
	fi;
bsp_bootcmd=
	echo Running BSP bootcmd ...;
	mmc dev ${mmcdev};
	if mmc rescan; then
		if run loadbootscript; then
			run bootscript;
		else
			if test ${sec_boot} = yes; then
				if run loadcntr; then
					run mmcboot;
				else
					run netboot;
				fi;
			else
				if run loadimage; then
					run mmcboot;
				else
					run netboot;
				fi;
			fi;
		fi;
	fi;
scriptaddr=0x83500000

#endif

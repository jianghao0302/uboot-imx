/* SPDX-License-Identifier: (GPL-2.0+ OR MIT) */

#include <env/nxp/imx_env.env>

#ifdef CONFIG_ANDROID_SUPPORT
splashpos=m,m
splashimage=0x50000000
fdt_high=0xffffffffffffffff
initrd_high=0xffffffffffffffff
emmc_dev=0
sd_dev=1
#else

initrd_addr=0x43800000
initrd_high=0xffffffffffffffff
emmc_dev=0
sd_dev=1

boot_fdt=try
boot_targets=usb0 mmc1 mmc2 dhcp
bootm_size=0x10000000
console=ttymxc0,115200
splashimage=0x50000000
fdt_addr=0x43000000
fdt_addr_r=0x43000000
fdt_high=0xffffffffffffffff
fdtfile=CONFIG_DEFAULT_FDT_FILE
image=Image
ip_dyn=yes
kernel_addr_r=CONFIG_SYS_LOAD_ADDR
loadaddr=CONFIG_SYS_LOAD_ADDR
mmcautodetect=yes
mmcdev=CONFIG_SYS_MMC_ENV_DEV
mmcpart=1
mmcroot=/dev/mmcblk1p2 rootwait rw
prepare_mcore=setenv mcore_clk clk-imx8mq.mcore_booted;
scriptaddr=0x43500000

nodes=/soc@0/bus@32c00000/hdmi@32c00000 /soc@0/bus@32c00000/display-controller@32e00000 /soc@0/video-codec@38300000 /soc@0/video-codec@38310000 /soc@0/gpu@38000000 /audio-codec-bt-sco /audio-codec /sound-bt-sco /sound-wm8524 /sound-spdif /sound-hdmi-arc /binman /soc@0/bus@30800000/crypto@30900000
sr_ir_v2_cmd=cp.b ${fdtcontroladdr} ${fdt_addr_r} 0x10000;
	fdt addr ${fdt_addr_r};
	fdt set /soc@0/usb@38100000 compatible snps,dwc3;
	fdt set /soc@0/usb@38200000 compatible snps,dwc3;
	for i in ${nodes}; do fdt rm ${i}; done

jh_clk=
jh_mmcboot=setenv fdtfile imx8mq-evk-root.dtb;
	setenv jh_clk kvm.enable_virt_at_load=false clk_ignore_unused mem=1872M;
	if run loadimage; then
		run mmcboot;
	else run jh_netboot; fi;
jh_netboot=setenv fdtfile imx8mq-evk-root.dtb; setenv jh_clk kvm.enable_virt_at_load=false clk_ignore_unused mem=1872M; run netboot;
mmcargs=setenv bootargs ${jh_clk} ${mcore_clk} console=${console} root=${mmcroot}
loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}
loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr_r} ${fdtfile}
mmcboot=echo Booting from mmc ...;
	run mmcargs;
	if test ${boot_fdt} = yes || test ${boot_fdt} = try; then
		if run loadfdt; then
			booti ${loadaddr} - ${fdt_addr_r};
		else
			echo WARN: Cannot load the DT;
		fi;
	else
		echo wait for boot;
	fi;
netargs=setenv bootargs ${jh_clk} ${mcore_clk} console=${console} root=/dev/nfs
	ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp
netboot=echo Booting from net ...;
	run netargs;
	if test ${ip_dyn} = yes; then
		setenv get_cmd dhcp;
	else
		setenv get_cmd tftp;
	fi;
	${get_cmd} ${loadaddr} ${image};
	if test ${boot_fdt} = yes || test ${boot_fit} = try; then
		if ${get_cmd} ${fdt_addr_r} ${fdtfile}; then
			booti ${loadaddr} - ${fdt_addr_r};
		else
			echo WARN: Cannot load the DT;
		fi;
	fi;
bsp_bootcmd=echo Running BSP bootcmd ...;
	mmc dev ${mmcdev};
	if mmc rescan; then
		if run loadimage; then
			run mmcboot;
		else
			run netboot;
		fi;
	fi;

#endif

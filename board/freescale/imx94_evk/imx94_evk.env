#include <env/nxp/imx_env.env>

#ifdef CONFIG_ANDROID_SUPPORT
plashpos=m,m
splashimage=0xA0000000
fdt_high=0xffffffffffffffff
initrd_high=0xffffffffffffffff
emmc_dev=0
sd_dev=1
#else

#ifdef CONFIG_AHAB_BOOT
sec_boot=yes
#else
sec_boot=no
#endif

#ifdef CONFIG_IMX_CRRM
crrm_normal_args=clk_ignore_unused
#else
crrm_normal_args=
#endif

jh_root_dtb=imx943-evk-root.dtb
jh_mmcboot=setenv fdtfile ${jh_root_dtb};
	setenv jh_clk kvm.enable_virt_at_load=false cpuidle.off=1 clk_ignore_unused kvm-arm.mode=nvhe;
	setenv jh_root_mem 0x60000000@0x90000000,0x100000000@0x100000000;
	if run loadimage; then
		run mmcboot;
	else run jh_netboot; fi;
jh_netboot=setenv fdtfile ${jh_root_dtb};
	setenv jh_root_mem 0x60000000@0x90000000,0x100000000@0x100000000;
	setenv jh_clk kvm.enable_virt_at_load=false cpuidle.off=1 clk_ignore_unused kvm-arm.mode=nvhe; run netboot;

initrd_addr=0x93800000
initrd_high=0xffffffffffffffff
emmc_dev=0
sd_dev=1
scriptaddr=0x93500000
kernel_addr_r=CONFIG_SYS_LOAD_ADDR
image=Image
splashimage=0xA0000000
console=ttyLP0,115200 earlycon
fdt_addr_r=0x93000000
fdt_addr=0x93000000
cntr_addr=0xA8000000
cntr_file=os_cntr_signed.bin
boot_fit=no
fdtfile=CONFIG_DEFAULT_FDT_FILE
bootm_size=0x10000000
mmcdev=CONFIG_SYS_MMC_ENV_DEV
mmcpart=1
mmcroot=/dev/mmcblk1p2 rootwait rw
mmcautodetect=yes
mmcargs=setenv bootargs ${jh_clk} ${mcore_args} console=${console} root=${mmcroot} ${crrm_normal_args}
prepare_mcore=setenv mcore_args pd_ignore_unused;
loadbootscript=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${script};
bootscript=echo Running bootscript from mmc ...; source
loadimage=fatload mmc ${mmcdev}:${mmcpart} ${loadaddr} ${image}
loadfdt=fatload mmc ${mmcdev}:${mmcpart} ${fdt_addr_r} ${fdtfile}
loadcntr=fatload mmc ${mmcdev}:${mmcpart} ${cntr_addr} ${cntr_file}
auth_os=booti ${cntr_addr}
boot_os=booti ${loadaddr} - ${fdt_addr_r};
crrm_file=flash_install.bin
crrm_serverip=192.168.0.1
crrm_recovery_args=setenv bootargs console=${console} rdinit=/linuxrc crrm_server=${crrm_serverip} clk_ignore_unused
crrm_download=echo Downloading from net ...;
		if test ${ip_dyn} = yes; then
			setenv get_cmd dhcp;
		else
			setenv get_cmd tftp;
		fi;
		${get_cmd} ${loadaddr} ${crrm_file};
		mmc dev ${mmcdev}; fatwrite mmc ${mmcdev}:${mmcpart} ${loadaddr} ${crrm_file} ${filesize};

kernel_comp_addr_r=0xc0000000
kernel_comp_size=0x4000000
mmcboot=echo Booting from mmc ...;
		run mmcargs;
		if test ${sec_boot} = yes; then
			run auth_os;
		else
			if test ${boot_fit} = yes || test ${boot_fit} = try; then
				bootm ${loadaddr};
			else
				if run loadfdt; then
					run boot_os;
				else
					echo WARN: Cannot load the DT;
				fi;
			fi;
		fi;
netargs=setenv bootargs ${jh_clk} ${mcore_args} console=${console} root=/dev/nfs
		ip=dhcp nfsroot=${serverip}:${nfsroot},v3,tcp
netboot=echo Booting from net ...;
		run netargs;
		if test ${ip_dyn} = yes; then
			setenv get_cmd dhcp;
		else
			setenv get_cmd tftp;
		fi;
		if test ${sec_boot} = yes; then
			${get_cmd} ${cntr_addr} ${cntr_file};
			run auth_os;
		else
			${get_cmd} ${loadaddr} ${image};
			if test ${boot_fit} = yes || test ${boot_fit} = try; then
				bootm ${loadaddr};
			else
				if ${get_cmd} ${fdt_addr_r} ${fdtfile}; then
					run boot_os;
				else
					echo WARN: Cannot load the DT;
				fi;
			fi;
		fi;
bsp_bootcmd=echo Running BSP bootcmd ...;
			mmc dev ${mmcdev}; if mmc rescan; then
			if run loadbootscript; then
				run bootscript;
			else
				if test ${sec_boot} = yes; then
					if run loadcntr; then
						run mmcboot;
					else run netboot;
					fi;
				else
					if run loadimage; then
						run mmcboot;
					else run netboot;
					fi;
				fi;
			fi;
		fi;

#endif
